{"version":3,"file":"static/js/933.40a24ba8.chunk.js","mappings":"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","sources":["components/admin/Customer.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { HiOutlineChevronLeft } from 'react-icons/hi';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { ApiError, UserService } from '../../api';\nimport Button from '../button/Button';\nimport Input from '../input/Input';\n\nconst Customer = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [balance, setBalance] = useState(0);\n  const [addressName, setAddressName] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [address, setAddress] = useState('');\n  const [city, setCity] = useState('');\n\n  const updateUser = useMutation(\n    (variables: {\n      id: string;\n      name: string;\n      email: string;\n      balance: number;\n      addressName: string;\n      phoneNumber: string;\n      address: string;\n      city: string;\n    }) =>\n      UserService.updateUser({\n        id: variables.id,\n        name: variables.name,\n        email: variables.email,\n        balance: variables.balance,\n        address_name: variables.addressName,\n        phone_number: variables.phoneNumber,\n        address: variables.address,\n        city: variables.city,\n      }),\n    {\n      onSuccess: (data) => {\n        toast.success(data.message);\n      },\n      onError: (error: ApiError) => {\n        toast.error(error.body.message);\n      },\n    }\n  );\n\n  const deleteUser = useMutation((id: string) => UserService.deleteUser(id), {\n    onSuccess: (data) => {\n      toast.success(data.message);\n      queryClient.invalidateQueries('users');\n      navigate('/admin/customers');\n    },\n    onError: (error: ApiError) => {\n      toast.error(error.body.message);\n    },\n  });\n\n  const fetchUser = useQuery(\n    ['user-detail', id],\n    () => UserService.getDetailUser(id as string),\n    {\n      refetchOnWindowFocus: false,\n      onSuccess: (data) => {\n        setName(data.name);\n        setEmail(data.email);\n        setBalance(data.balance);\n        setAddressName(data.address_name ?? '');\n        setPhoneNumber(data.phone_number ?? '');\n        setAddress(data.address ?? '');\n        setCity(data.city ?? '');\n      },\n    }\n  );\n\n  if (fetchUser.isLoading || id === undefined) {\n    return <div>Loading...</div>;\n  }\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    updateUser.mutate({\n      id,\n      name,\n      email,\n      balance,\n      addressName,\n      phoneNumber,\n      address,\n      city,\n    });\n  };\n\n  return (\n    <>\n      <h2 className=\"w-full text-2xl font-medium\">Update Customer</h2>\n      <div className=\"flex py-3 \">\n        <Link\n          to=\"/admin/customers\"\n          className=\"flex place-items-center  gap-x-2\"\n        >\n          <HiOutlineChevronLeft className=\"text-xl\" />\n          Go Back\n        </Link>\n      </div>\n      <form\n        className=\"information flex w-full flex-col gap-y-4 py-4 text-lg text-gray-700 \"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"\">\n          <label htmlFor=\"name\" className=\"text-lg\">\n            Name\n          </label>\n          <Input\n            name=\"name\"\n            type=\"text\"\n            extraClass=\"w-full mt-1 mb-2\"\n            border=\"border-2 border-gray-400\"\n            value={name}\n            onChange={(e) => setName((e.target as HTMLInputElement).value)}\n            required\n          />\n        </div>\n        <div className=\"\">\n          <label htmlFor=\"email\" className=\"text-lg\">\n            Email\n          </label>\n          <Input\n            name=\"email\"\n            type=\"email\"\n            extraClass=\"w-full mt-1 mb-2\"\n            border=\"border-2 border-gray-400\"\n            value={email}\n            onChange={(e) => setEmail((e.target as HTMLInputElement).value)}\n            required\n          />\n        </div>\n        <div className=\"\">\n          <label htmlFor=\"balance\" className=\"text-lg\">\n            Balance\n          </label>\n          <Input\n            name=\"balance\"\n            type=\"number\"\n            extraClass=\"w-full mt-1 mb-2\"\n            border=\"border-2 border-gray-400\"\n            value={balance.toString()}\n            onChange={(e) =>\n              setBalance(Number((e.target as HTMLInputElement).value))\n            }\n            required\n          />\n        </div>\n        <div className=\"\">\n          <label htmlFor=\"addressName\" className=\"text-lg\">\n            Address Name\n          </label>\n          <Input\n            name=\"addressName\"\n            type=\"text\"\n            extraClass=\"w-full mt-1 mb-2\"\n            border=\"border-2 border-gray-400\"\n            value={addressName}\n            onChange={(e) =>\n              setAddressName((e.target as HTMLInputElement).value)\n            }\n            required\n          />\n        </div>\n        <div className=\"\">\n          <label htmlFor=\"phoneNumber\" className=\"text-lg\">\n            Phone Number\n          </label>\n          <Input\n            name=\"phoneNumber\"\n            type=\"text\"\n            extraClass=\"w-full mt-1 mb-2\"\n            border=\"border-2 border-gray-400\"\n            value={phoneNumber}\n            onChange={(e) =>\n              setPhoneNumber((e.target as HTMLInputElement).value)\n            }\n            required\n          />\n        </div>\n        <div className=\"\">\n          <label htmlFor=\"address\" className=\"text-lg\">\n            Address\n          </label>\n          <Input\n            name=\"address\"\n            type=\"text\"\n            extraClass=\"w-full mt-1 mb-2\"\n            border=\"border-2 border-gray-400\"\n            value={address}\n            onChange={(e) => setAddress((e.target as HTMLInputElement).value)}\n            required\n          />\n        </div>\n        <div className=\"\">\n          <label htmlFor=\"city\" className=\"text-lg\">\n            City\n          </label>\n          <Input\n            name=\"city\"\n            type=\"text\"\n            extraClass=\"w-full mt-1 mb-2\"\n            border=\"border-2 border-gray-400\"\n            value={city}\n            onChange={(e) => setCity((e.target as HTMLInputElement).value)}\n            required\n          />\n        </div>\n\n        <div className=\"mt-8 flex place-content-between\">\n          <button\n            type=\"button\"\n            onClick={() => deleteUser.mutate(id)}\n            className=\"mb-4 w-52 border border-gray-500 py-3 px-6 text-center text-xl hover:bg-gray-500  hover:text-gray-100 sm:py-2 sm:text-base\"\n            aria-label=\"Delete User\"\n          >\n            Delete User\n          </button>\n          <Button\n            type=\"submit\"\n            value=\"Update User\"\n            extraClass=\"w-52 text-center text-xl mb-4\"\n            size=\"lg\"\n          />\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default Customer;\n"],"names":["id","useParams","navigate","useNavigate","queryClient","useQueryClient","useState","name","setName","email","setEmail","balance","setBalance","addressName","setAddressName","phoneNumber","setPhoneNumber","address","setAddress","city","setCity","updateUser","useMutation","variables","UserService","address_name","phone_number","onSuccess","data","toast","message","onError","error","body","deleteUser","invalidateQueries","useQuery","refetchOnWindowFocus","isLoading","undefined","handleSubmit","e","preventDefault","mutate","className","to","onSubmit","htmlFor","type","extraClass","border","value","onChange","target","required","toString","Number","onClick","size"],"sourceRoot":""}