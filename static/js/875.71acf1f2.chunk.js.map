{"version":3,"file":"static/js/875.71acf1f2.chunk.js","mappings":"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","sources":["pages/TestModel.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { AiOutlineLoading3Quarters } from 'react-icons/ai';\nimport { useMutation, useQuery } from 'react-query';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { ApiError, SearchService } from '../api';\nimport { convertToBase64 } from '../components/util/utilFunc';\nimport { useSearch } from '../context/SearchContext';\n\nconst TestModel = () => {\n  const { searchImage } = useSearch();\n  return (\n    <main\n      id=\"main-content\"\n      className=\"relative mx-auto mt-20 min-h-screen w-[95vw] overflow-hidden  border-t border-gray-100 2xl:w-[90rem]\"\n    >\n      <div className=\"w-full \">\n        <h1 className=\"mt-6 mb-2 text-center text-2xl sm:text-left sm:text-4xl\">\n          Model Test\n        </h1>\n      </div>\n      <div className=\"mt-4 flex gap-y-4 flex-col w-full\">\n        {/* ===== Image ===== */}\n        <section\n          className={`\n          ${searchImage.length > 0 && 'border-[1.5px] border-gray-500'}\n          flex flex-wrap gap-4  py-2 px-5 font-medium text-gray-400 w-fit`}\n        >\n          {searchImage.map((image, index) => (\n            <div key={index} className=\"flex flex-col place-content-center\">\n              <img\n                src={(image.file as any).preview}\n                className=\"w-40 h-40 rounded-md border-2  border-gray-100  object-contain object-bottom\"\n                onLoad={() => {\n                  URL.revokeObjectURL((image.file as any).preview);\n                }}\n              />\n              <h1 className=\"text-lg font-medium text-center\">\n                {image.category}\n              </h1>\n            </div>\n          ))}\n        </section>\n\n        {/* ===== Main Section ===== */}\n        <section>\n          <Dropzone />\n        </section>\n      </div>\n    </main>\n  );\n};\n\nconst Dropzone = () => {\n  const { setSearch, setSearchImage, searchImage } = useSearch();\n  const totalImages = useRef<number>(0);\n  const [processing, setProcessing] = useState(false);\n  const [showerThought, setShowerThought] = useState('');\n  const indexShowerThought = useRef(0);\n  const searchByImage = useMutation(\n    (variables: { base64_image: string; imageFile: any }) =>\n      SearchService.searchImage({ base64_image: variables.base64_image }),\n    {\n      onMutate: () => {\n        setProcessing(true);\n      },\n      onSuccess: (data, variables) => {\n        totalImages.current--;\n        setSearchImage!((prev) => [\n          ...prev,\n          {\n            category: data.title,\n            file: variables.imageFile,\n          },\n        ]);\n        if (totalImages.current === 0) {\n          setSearch!(false);\n          setProcessing(false);\n        }\n      },\n      onError: (error: ApiError) => {\n        toast.error(error.body.message);\n        setProcessing(false);\n      },\n    }\n  );\n\n  const fetchShowerThought = useQuery(\n    'showerThought',\n    () => SearchService.showerThoughts(),\n    {\n      staleTime: Infinity,\n      onSuccess: (data) => {\n        setShowerThought(data.data[indexShowerThought.current]);\n        indexShowerThought.current++;\n      },\n    }\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (fetchShowerThought.data != null) {\n        if (\n          indexShowerThought.current === fetchShowerThought.data?.data.length\n        ) {\n          indexShowerThought.current = 0;\n        }\n        setShowerThought(\n          fetchShowerThought.data?.data[indexShowerThought.current]\n        );\n        indexShowerThought.current++;\n      }\n    }, 8000);\n\n    return () => clearInterval(interval);\n  }, [fetchShowerThought.data]);\n\n  const onDrop = useCallback(\n    async (acceptedFiles: File[]) => {\n      totalImages.current = acceptedFiles.length;\n      setSearchImage!([]);\n      const mappedFiles = acceptedFiles.map((file) => {\n        return Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        });\n      });\n      mappedFiles.forEach(async (file: any) => {\n        const base64 = (await convertToBase64(file)) as string;\n        searchByImage.mutate({ base64_image: base64, imageFile: file });\n      });\n    },\n    [searchByImage]\n  );\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    onDrop,\n    disabled: processing,\n    accept: {\n      'image/jpeg': [],\n      'image/jpg': [],\n      'image/png': [],\n      'image/webp': [],\n      'image/gif': [],\n    },\n  });\n\n  return (\n    <>\n      <div\n        {...getRootProps()}\n        className={`${isDragActive && 'bg-gray-100'} ${\n          isDragReject && 'bg-red-100'\n        } ${isDragAccept && 'bg-green-100'} ${\n          processing && 'cursor-not-allowed bg-gray-100'\n        }\n          gap-y flex h-[12rem] w-full cursor-pointer flex-col place-content-center place-items-center rounded-b-lg border-2 border-dashed border-gray-300 text-xl font-bold`}\n      >\n        <input {...getInputProps()} />\n        {processing ? (\n          <div className=\"flex flex-col items-center justify-center\">\n            <p className=\"\">Processing Your Image</p>\n            <AiOutlineLoading3Quarters className=\"my-3 animate-spin-slow text-5xl text-gray-300\" />\n          </div>\n        ) : isDragReject ? (\n          <p>Unsupported file type...</p>\n        ) : isDragActive ? (\n          <p>Drop the files here ...</p>\n        ) : (\n          <p>Drag 'n' drop some files here, or click here to select files</p>\n        )}\n\n        {processing ? (\n          <p className=\" px-[10%] text-center text-base text-gray-400\">\n            {showerThought}{' '}\n          </p>\n        ) : (\n          <p className=\"text-lg text-gray-300\">\n            Only *jpg *.jpeg *.png and *.webp images will be accepted\n          </p>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default TestModel;\n"],"names":["Dropzone","useSearch","setSearch","setSearchImage","totalImages","searchImage","useRef","useState","processing","setProcessing","showerThought","setShowerThought","indexShowerThought","searchByImage","useMutation","variables","SearchService","base64_image","onMutate","onSuccess","data","current","prev","category","title","file","imageFile","onError","error","toast","body","message","fetchShowerThought","useQuery","staleTime","Infinity","useEffect","interval","setInterval","length","clearInterval","onDrop","useCallback","acceptedFiles","map","Object","assign","preview","URL","createObjectURL","forEach","convertToBase64","base64","mutate","useDropzone","disabled","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","className","id","image","index","src","onLoad","revokeObjectURL"],"sourceRoot":""}