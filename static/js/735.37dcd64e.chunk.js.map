{"version":3,"file":"static/js/735.37dcd64e.chunk.js","mappings":"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","sources":["components/Search.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport {\n  AiOutlineCamera,\n  AiOutlineLoading3Quarters,\n  AiOutlineSearch,\n} from 'react-icons/ai';\nimport { useMutation, useQuery } from 'react-query';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { ApiError, SearchService } from '../api';\nimport { useSearch } from '../context/SearchContext';\nimport { convertToBase64 } from './util/utilFunc';\n\nconst Search = () => {\n  const { search, setSearch } = useSearch();\n  const navigate = useNavigate();\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef, setSearch);\n  const [searchText, setSearchText] = useState('');\n  const [searchImage, setSearchImage] = useState(false);\n\n  const { data } = useQuery(\n    ['search', searchText],\n    () => SearchService.searchText(searchText),\n    {\n      enabled: searchText.length > 0,\n      staleTime: Infinity,\n    }\n  );\n\n  const searchProduct = (productId: string) => {\n    setSearch!(false);\n    navigate(`/products/${productId}`);\n  };\n\n  if (!search) return null;\n\n  return (\n    <div\n      className=\"fixed top-0 z-[200]  h-screen w-screen  bg-[rgba(0,0,0,0.5)] px-2 pt-10\"\n      onKeyDown={(e) => {\n        if (e.key === 'Escape') {\n          setSearch!(false);\n        }\n      }}\n    >\n      <div\n        className=\"mx-auto max-w-md overflow-hidden rounded-lg md:max-w-xl \"\n        ref={wrapperRef}\n      >\n        <div className=\"md:flex\">\n          <div className=\"w-full px-3\">\n            <div className=\"relative\">\n              <AiOutlineSearch className=\"absolute top-4 left-4 text-2xl text-gray-400\" />\n              <input\n                autoFocus\n                type=\"text\"\n                className={`h-14 w-full bg-white px-14 text-lg  hover:cursor-pointer focus:outline-none ${\n                  data?.length || searchImage\n                    ? 'rounded-t-lg border-b-2 border-gray-300'\n                    : 'rounded-lg'\n                }`}\n                name=\"search\"\n                placeholder=\"Product Name Or Brand\"\n                value={searchText}\n                onFocus={() => {\n                  setSearchImage(false);\n                }}\n                onChange={(e) => setSearchText(e.target.value)}\n              />\n              <span className=\"absolute top-4 right-5 border-l pl-4\">\n                <AiOutlineCamera\n                  onClick={() => setSearchImage(!searchImage)}\n                  className=\"top-4 right-4 text-2xl text-gray-500 hover:cursor-pointer hover:text-green-500\"\n                />\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"relative flex w-full flex-col px-3 \">\n          <div className=\"flex flex-col rounded-b-lg  bg-white  text-gray-600\">\n            {searchImage ? (\n              <Dropzone />\n            ) : (\n              data?.map((item) => (\n                <button\n                  onClick={() => searchProduct(item.id)}\n                  key={item.id}\n                  className=\"flex flex-col p-3 hover:bg-gray-100 hover:text-black\"\n                >\n                  <div className=\"flex flex-row\">{item.title}</div>\n                </button>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Dropzone = () => {\n  const navigate = useNavigate();\n  const { setSearch, setSearchImage } = useSearch();\n  const image = useRef<any>(null);\n  const [processing, setProcessing] = useState(false);\n  const [showerThought, setShowerThought] = useState('');\n  const indexShowerThought = useRef(0);\n  const searchByImage = useMutation(\n    (base64_image: string) => SearchService.searchImage({ base64_image }),\n    {\n      onMutate: () => {\n        setProcessing(true);\n      },\n      onSuccess: (data) => {\n        setSearch!(false);\n        setSearchImage!(\n          new Array({\n            file: image.current,\n            category: data.title,\n          })\n        );\n        navigate(`/products?category=${data.id}&searchImage=true`);\n      },\n      onError: (error: ApiError) => {\n        toast.error(error.body.message);\n        setProcessing(false);\n      },\n    }\n  );\n\n  const fetchShowerThought = useQuery(\n    'showerThought',\n    () => SearchService.showerThoughts(),\n    {\n      staleTime: 10000,\n      onSuccess: (data) => {\n        setShowerThought(data.data[indexShowerThought.current]);\n        indexShowerThought.current++;\n      },\n    }\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (fetchShowerThought.data != null) {\n        if (\n          indexShowerThought.current === fetchShowerThought.data?.data.length\n        ) {\n          indexShowerThought.current = 0;\n        }\n        setShowerThought(\n          fetchShowerThought.data?.data[indexShowerThought.current]\n        );\n        indexShowerThought.current++;\n      }\n    }, 8000);\n\n    return () => clearInterval(interval);\n  }, [fetchShowerThought.data]);\n\n  const onDrop = useCallback(\n    async (acceptedFiles: File[]) => {\n      const mappedFiles = acceptedFiles.map((file) => {\n        return Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        });\n      });\n      const base64 = await convertToBase64(mappedFiles[0]);\n      searchByImage.mutate(base64 as string);\n      image.current = mappedFiles[0];\n    },\n    [searchByImage]\n  );\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    onDrop,\n    disabled: processing,\n    multiple: false,\n    accept: {\n      'image/jpeg': [],\n      'image/jpg': [],\n      'image/png': [],\n      'image/webp': [],\n      'image/gif': [],\n    },\n  });\n\n  return (\n    <>\n      <div\n        {...getRootProps()}\n        className={`${isDragActive && 'bg-gray-100'} ${\n          isDragReject && 'bg-red-100'\n        } ${isDragAccept && 'bg-green-100'} ${\n          processing && 'cursor-not-allowed bg-gray-100'\n        }\n          gap-y flex h-[12rem] w-full cursor-pointer flex-col place-content-center place-items-center rounded-b-lg border-2 border-dashed border-gray-300 text-xl font-bold`}\n      >\n        <input {...getInputProps()} />\n        {processing ? (\n          <div className=\"flex flex-col items-center justify-center\">\n            <p className=\"\">Processing Your Image</p>\n            <AiOutlineLoading3Quarters className=\"my-3 animate-spin-slow text-5xl text-gray-300\" />\n          </div>\n        ) : isDragReject ? (\n          <p>Unsupported file type...</p>\n        ) : isDragActive ? (\n          <p>Drop the files here ...</p>\n        ) : (\n          <p>Drag 'n' drop some files here, or click here to select files</p>\n        )}\n\n        {processing ? (\n          <p className=\" px-[10%] text-center text-base text-gray-400\">\n            {showerThought}{' '}\n          </p>\n        ) : (\n          <p className=\"text-lg text-gray-300\">\n            Only *jpg *.jpeg *.png and *.webp images will be accepted\n          </p>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst useOutsideAlerter = (\n  ref: React.MutableRefObject<any>,\n  setSearch?: React.Dispatch<React.SetStateAction<boolean>>\n) => {\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: MouseEvent) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        setSearch!(false);\n      }\n    }\n    // Bind the event listener\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [ref, setSearch]);\n};\nexport default Search;\n"],"names":["Dropzone","navigate","useNavigate","useSearch","setSearch","setSearchImage","image","useRef","useState","processing","setProcessing","showerThought","setShowerThought","indexShowerThought","searchByImage","useMutation","base64_image","SearchService","onMutate","onSuccess","data","Array","file","current","category","title","id","onError","error","toast","body","message","fetchShowerThought","useQuery","staleTime","useEffect","interval","setInterval","length","clearInterval","onDrop","useCallback","acceptedFiles","mappedFiles","map","Object","assign","preview","URL","createObjectURL","convertToBase64","base64","mutate","useDropzone","disabled","multiple","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","className","useOutsideAlerter","ref","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","search","wrapperRef","searchText","setSearchText","searchImage","enabled","Infinity","onKeyDown","e","key","autoFocus","type","name","placeholder","value","onFocus","onChange","onClick","item","productId"],"sourceRoot":""}