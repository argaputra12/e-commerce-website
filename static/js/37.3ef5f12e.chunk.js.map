{"version":3,"file":"static/js/37.3ef5f12e.chunk.js","mappings":"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","sources":["pages/Checkout.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { AiOutlineLoading3Quarters } from 'react-icons/ai';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { ApiError, OrderService, SearchService, UserService } from '../api';\nimport Button from '../components/button/Button';\nimport Input from '../components/input/Input';\nimport { convertToCurrency, roundDecimal } from '../components/util/utilFunc';\nimport { useCart } from '../context/CartContext';\n\ntype PaymentType = 'BALANCE';\ntype DeliveryType = 'REGULAR' | 'NEXT_DAY';\n\nconst ShoppingCart = () => {\n  const { cart } = useCart();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  const [addressName, setAddressName] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [address, setAddress] = useState('');\n  const [city, setCity] = useState('');\n  const [paymentMethod, setPaymentMethod] = useState<PaymentType>('BALANCE');\n  const [delivery, setDelivery] = useState<DeliveryType>('REGULAR');\n\n  const [useUserAddress, setUseUserAddress] = useState(false);\n  const [sendEmail, setSendEmail] = useState(false);\n\n  const [processing, setProcessing] = useState(false);\n  const [showerThought, setShowerThought] = useState('');\n  const indexShowerThought = useRef(0);\n\n  const fetchUserAddress = useQuery('userAddress', () =>\n    UserService.getUserShippingAddress()\n  );\n\n  const fetchOrder = useQuery('order', () => UserService.getOrdersUser(), {\n    enabled: false,\n  });\n\n  const fetchShowerThought = useQuery(\n    'showerThought',\n    () => SearchService.showerThoughts(),\n    {\n      staleTime: 10000,\n      onSuccess: (data) => {\n        setShowerThought(data.data[indexShowerThought.current]);\n        indexShowerThought.current++;\n      },\n    }\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (fetchShowerThought.data != null) {\n        if (\n          indexShowerThought.current === fetchShowerThought.data?.data.length\n        ) {\n          indexShowerThought.current = 0;\n        }\n        setShowerThought(\n          fetchShowerThought.data?.data[indexShowerThought.current]\n        );\n        indexShowerThought.current++;\n      }\n    }, 8000);\n\n    return () => clearInterval(interval);\n  }, [fetchShowerThought.data]);\n\n  const createOrder = useMutation(OrderService.createOrder, {\n    onSuccess: (data) => {\n      toast.success(data.message);\n      fetchOrder.refetch();\n      queryClient.invalidateQueries('cart');\n      queryClient.invalidateQueries('user');\n\n      navigate('/profile/order');\n    },\n    onError: (error: ApiError) => {\n      toast.error(error.body.message);\n      setProcessing(false);\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setProcessing(true);\n    createOrder.mutate({\n      shipping_method: delivery === 'REGULAR' ? 'Regular' : 'Next Day',\n      shipping_address: {\n        address_name: addressName,\n        phone_number: phoneNumber,\n        address,\n        city,\n      },\n      send_email: sendEmail,\n    });\n  };\n\n  useEffect(() => {\n    if (useUserAddress && fetchUserAddress.data != null) {\n      setAddressName(fetchUserAddress.data.address_name ?? '');\n      setPhoneNumber(fetchUserAddress.data.phone_number ?? '');\n      setAddress(fetchUserAddress.data.address ?? '');\n      setCity(fetchUserAddress.data.city ?? '');\n    }\n  }, [useUserAddress, fetchUserAddress.data]);\n\n  if (fetchUserAddress.isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  const subtotal = roundDecimal(\n    cart.data.reduce((acc, item) => {\n      return acc + item.details.quantity * item.price;\n    }, 0)\n  );\n\n  //  Regular:\n  //  If total price of items < 200k: Shipping price is 15% of the total price of items purchased\n  //  If total price of items >= 200k: Shipping price is 20% of the total price of items purchased\n  const regularDelivery = subtotal < 200000 ? subtotal * 0.15 : subtotal * 0.2;\n\n  //  Next Day:\n  //  If total price of items < 300k: Shipping price is 20% of the total price of items purchased\n  //  If total price of items >= 300k: Shipping price is 25% of the total price of items purchased\n  const nextDayDelivery = subtotal < 300000 ? subtotal * 0.2 : subtotal * 0.25;\n\n  return (\n    <main id=\"main-content\" className=\"mx-auto mt-24 min-h-[60vh] max-w-7xl\">\n      {processing && (\n        <div className=\"loading-overlay fixed top-0 left-0 z-50 flex h-full w-full flex-col items-center justify-center gap-y-4 bg-white bg-opacity-80\">\n          <p className=\"text-2xl font-semibold text-gray-500\">\n            Processing Your Order...\n          </p>\n          <AiOutlineLoading3Quarters className=\"my-3 animate-spin-slow text-7xl text-gray-300\" />\n          <p className=\"text-xl font-semibold text-gray-400\">{showerThought}</p>\n        </div>\n      )}\n      {/* ===== Heading & Continue Shopping */}\n      <div className=\"app-max-width w-full border-t-2 border-gray-100 px-4 sm:px-8 md:px-20\">\n        <h1 className=\"mt-6 mb-2 text-center text-2xl sm:text-left sm:text-4xl\">\n          Checkout\n        </h1>\n      </div>\n      {/* ===== Form Section ===== */}\n      <form\n        className=\"app-max-width mb-14 flex flex-col px-4 sm:px-8 md:px-20 lg:flex-row\"\n        onSubmit={handleSubmit}\n      >\n        <section className=\"mr-8 h-full w-full lg:w-7/12\">\n          <div className=\"my-4\">\n            <label htmlFor=\"addressName\" className=\"text-lg\">\n              Addres Name\n            </label>\n            <Input\n              name=\"addressName\"\n              type=\"text\"\n              extraClass={`${\n                useUserAddress ? 'bg-gray-100' : ''\n              } w-full mt-1 mb-2`}\n              border=\"border-2 border-gray-400\"\n              value={addressName}\n              onChange={(e) =>\n                setAddressName((e.target as HTMLInputElement).value)\n              }\n              readOnly={useUserAddress}\n              required\n            />\n          </div>\n\n          <div className=\"my-4\">\n            <label htmlFor=\"phoneNumber\" className=\"mb-1 text-lg\">\n              Phone Number\n            </label>\n            <Input\n              name=\"phoneNumber\"\n              type=\"text\"\n              extraClass={`${\n                useUserAddress ? 'bg-gray-100' : ''\n              } w-full mt-1 mb-2`}\n              border=\"border-2 border-gray-400\"\n              value={phoneNumber}\n              onChange={(e) =>\n                setPhoneNumber((e.target as HTMLInputElement).value)\n              }\n              readOnly={useUserAddress}\n              required\n            />\n          </div>\n\n          <div className=\"my-4\">\n            <label htmlFor=\"address\" className=\"text-lg\">\n              Address\n            </label>\n            <Input\n              name=\"address\"\n              type=\"text\"\n              extraClass={`${\n                useUserAddress ? 'bg-gray-100' : ''\n              } w-full mt-1 mb-2`}\n              border=\"border-2 border-gray-400\"\n              value={address}\n              onChange={(e) => setAddress((e.target as HTMLInputElement).value)}\n              readOnly={useUserAddress}\n              required\n            />\n          </div>\n\n          <div className=\"my-4\">\n            <label htmlFor=\"city\" className=\"text-lg\">\n              City\n            </label>\n            <Input\n              name=\"city\"\n              type=\"text\"\n              extraClass={`${\n                useUserAddress ? 'bg-gray-100' : ''\n              } w-full mt-1 mb-2`}\n              border=\"border-2 border-gray-400\"\n              value={city}\n              onChange={(e) => setCity((e.target as HTMLInputElement).value)}\n              readOnly={useUserAddress}\n              required\n            />\n          </div>\n          <button\n            type=\"button\"\n            className=\" flex place-items-center\"\n            onClick={() => setUseUserAddress(!useUserAddress)}\n          >\n            <div className=\"relative mr-2 inline-block w-10 select-none align-middle transition duration-200 ease-in\">\n              <input\n                type=\"checkbox\"\n                name=\"toggle-user-address\"\n                id=\"toggle-user-address\"\n                checked={useUserAddress}\n                onChange={() => setUseUserAddress(!useUserAddress)}\n                className={`${\n                  useUserAddress ? 'right-0 border-gray-500' : 'border-gray-300'\n                } absolute block h-6 w-6 cursor-pointer appearance-none rounded-full border-4  bg-white`}\n              />\n              <label\n                htmlFor=\"toggle\"\n                className={`${\n                  useUserAddress ? ' bg-gray-500' : 'bg-gray-300'\n                }  block h-6 cursor-pointer overflow-hidden rounded-full `}\n              ></label>\n            </div>\n            <label htmlFor=\"toggle-user-address\">\n              Use my address as shipping address\n            </label>\n          </button>\n        </section>\n        {/* Cart Totals */}\n        <section className=\"mt-10 h-full w-full lg:mt-4 lg:w-5/12\">\n          <div className=\"divide-y-2 divide-gray-200 border border-gray-500 p-6\">\n            <div className=\"flex justify-between\">\n              <span className=\"mb-3 text-base uppercase\">Product</span>\n              <span className=\"mb-3 text-base uppercase\">SUBTOTAL</span>\n            </div>\n\n            <div className=\"pt-2\">\n              {cart.data.map((item) => (\n                <div className=\"mb-2 flex justify-between\" key={item.id}>\n                  <div className=\"  flex\">\n                    <span className=\"max-w-[10rem] overflow-clip text-ellipsis whitespace-pre text-base font-medium\">\n                      {item.name}{' '}\n                    </span>\n                    <span className=\"text-gray-400\">\n                      {' '}\n                      ({item.details.size}) x {item.details.quantity}\n                    </span>\n                  </div>\n                  <div className=\"text-base\">\n                    {convertToCurrency(\n                      roundDecimal(item.price * item.details.quantity)\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"flex justify-between py-3\">\n              <span className=\"uppercase\">SUBTOTAL</span>\n              <span>{convertToCurrency(subtotal)}</span>\n            </div>\n\n            <div className=\"py-3\">\n              <span className=\"uppercase\">DELIVERY</span>\n              <div className=\"mt-3 space-y-2\">\n                <div className=\"flex justify-between accent-gray-600\">\n                  <div>\n                    <input\n                      type=\"radio\"\n                      name=\"delivery\"\n                      value=\"REGULAR\"\n                      id=\"regular\"\n                      checked={delivery === 'REGULAR'}\n                      onChange={() => setDelivery('REGULAR')}\n                    />{' '}\n                    <label htmlFor=\"regular\" className=\"cursor-pointer\">\n                      Regular\n                    </label>\n                  </div>\n                  <span>{convertToCurrency(regularDelivery)}</span>\n                </div>\n                <div className=\"flex justify-between accent-gray-600\">\n                  <div>\n                    <input\n                      type=\"radio\"\n                      name=\"delivery\"\n                      value=\"NEXT_DAY\"\n                      id=\"next_day\"\n                      checked={delivery === 'NEXT_DAY'}\n                      onChange={() => setDelivery('NEXT_DAY')}\n                    />{' '}\n                    <label htmlFor=\"next_day\" className=\"cursor-pointer\">\n                      Next Day\n                    </label>\n                  </div>\n                  <span>{convertToCurrency(nextDayDelivery)}</span>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <div className=\"flex justify-between py-3\">\n                <span>Grand Total</span>\n                <span>\n                  {convertToCurrency(\n                    roundDecimal(\n                      +subtotal +\n                        (delivery === 'REGULAR'\n                          ? regularDelivery\n                          : nextDayDelivery)\n                    )\n                  )}\n                </span>\n              </div>\n\n              <div className=\"mt-2 mb-4 grid gap-4\">\n                <label\n                  htmlFor=\"plan-bank\"\n                  className=\"relative flex cursor-pointer flex-col rounded-lg border border-gray-300 bg-white p-5 shadow-md\"\n                >\n                  <span className=\"font-semibold capitalize leading-tight text-gray-500\">\n                    Balance\n                  </span>\n                  <span className=\"mt-1 text-sm text-gray-400\">\n                    Pay with your balance\n                  </span>\n                  <input\n                    type=\"radio\"\n                    name=\"plan\"\n                    id=\"plan-bank\"\n                    value=\"BALANCE\"\n                    className=\"absolute h-0 w-0 appearance-none\"\n                    onChange={() => setPaymentMethod('BALANCE')}\n                  />\n                  <span\n                    aria-hidden=\"true\"\n                    className={`${\n                      paymentMethod === 'BALANCE' ? 'block' : 'hidden'\n                    } absolute inset-0 rounded-lg border-2 border-gray-500 bg-opacity-10`}\n                  >\n                    <span className=\"absolute top-4 right-4 inline-flex h-6 w-6 items-center justify-center rounded-full bg-gray-100\">\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                        className=\"h-5 w-5 text-green-600\"\n                      >\n                        <path\n                          fillRule=\"evenodd\"\n                          d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                          clipRule=\"evenodd\"\n                        />\n                      </svg>\n                    </span>\n                  </span>\n                </label>\n              </div>\n\n              <div className=\"my-8\">\n                <button\n                  type=\"button\"\n                  className=\" flex place-items-center\"\n                  onClick={() => setSendEmail(!sendEmail)}\n                >\n                  <div className=\"relative mr-2 inline-block w-10 select-none align-middle transition duration-200 ease-in\">\n                    <input\n                      type=\"checkbox\"\n                      name=\"toggle-user-email\"\n                      id=\"toggle-user-email\"\n                      checked={sendEmail}\n                      onChange={() => setSendEmail(!sendEmail)}\n                      className={`${\n                        sendEmail\n                          ? 'right-0 border-gray-500'\n                          : 'border-gray-300'\n                      } absolute block h-6 w-6 cursor-pointer appearance-none rounded-full border-4  bg-white`}\n                    />\n                    <label\n                      htmlFor=\"toggle\"\n                      className={`${\n                        sendEmail ? ' bg-gray-500' : 'bg-gray-300'\n                      }  block h-6 cursor-pointer overflow-hidden rounded-full `}\n                    ></label>\n                  </div>\n                  <label htmlFor=\"toggle-user-email\">\n                    Send order detail to my email\n                  </label>\n                </button>\n              </div>\n            </div>\n\n            <Button\n              value=\"Place Order\"\n              size=\"xl\"\n              extraClass={'w-full'}\n              type=\"submit\"\n            />\n          </div>\n        </section>\n      </form>\n    </main>\n  );\n};\n\nexport default ShoppingCart;\n"],"names":["cart","useCart","navigate","useNavigate","queryClient","useQueryClient","useState","addressName","setAddressName","phoneNumber","setPhoneNumber","address","setAddress","city","setCity","paymentMethod","setPaymentMethod","delivery","setDelivery","useUserAddress","setUseUserAddress","sendEmail","setSendEmail","processing","setProcessing","showerThought","setShowerThought","indexShowerThought","useRef","fetchUserAddress","useQuery","UserService","fetchOrder","enabled","fetchShowerThought","SearchService","staleTime","onSuccess","data","current","useEffect","interval","setInterval","length","clearInterval","createOrder","useMutation","OrderService","toast","message","refetch","invalidateQueries","onError","error","body","address_name","phone_number","isLoading","subtotal","roundDecimal","reduce","acc","item","details","quantity","price","regularDelivery","nextDayDelivery","id","className","onSubmit","e","preventDefault","mutate","shipping_method","shipping_address","send_email","htmlFor","name","type","extraClass","border","value","onChange","target","readOnly","required","onClick","checked","map","size","convertToCurrency","xmlns","viewBox","fill","fillRule","d","clipRule"],"sourceRoot":""}